package Games;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class RPS {

    private JButton rockButton;
    private JPanel panel1;
    private JButton paperButton;
    private JButton scissorsButton;
    private JLabel CPULabel;
    private JLabel titleLabel;
    private JLabel userLabel;
    private JLabel scoreLabel;
    private JLabel highScoreLabel;

    private int highScore = 0;
    private int score = 0;

    public RPS() {

        CPULabel.setText("");
        userLabel.setText("");
        titleLabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\RPSLogo.PNG"));

        rockButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                play(0);
            }
        });
        paperButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                play(1);
            }
        });
        scissorsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                play(2);
            }
        });
    }

    public static void main(String[] args) {

        JFrame frame = new JFrame("RPS");
        frame.setContentPane(new RPS().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

        new RPS();

    }

    public void play(int choice) {

        titleLabel.setIcon(null);
        titleLabel.setText("");

        scoreLabel.setText("Current Score: " + score);

        Random random = new Random();
        int CPUChoice = random.nextInt(3);

        userHand(choice);
        CPUHand(CPUChoice);

        int winCalc = (3 + choice - CPUChoice) % 3;

        calculateWinner(winCalc);

        scoreLabel.setText("Score: " + score);

        if (score > highScore) {
            highScore = score;
        }

        highScoreLabel.setText("High Score: " + highScore);

    }

    public void calculateWinner(int number) {
        switch (number) {
            case 0:
                titleLabel.setText("<html>It's a Tie!<br></html>");
                break;
            case 1:
                titleLabel.setText("<html>You Won!<br>+1 Point</html>");
                score++;
                break;
            case 2:
                titleLabel.setText("<html>You Lost!<br>Try Again?</html>");
                score = 0;
                break;
        }
    }

    public void userHand(int number) {
        switch (number) {
            case 0:
                userLabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\UserRock.png"));
                break;
            case 1:
                userLabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\UserPaper.png"));
                break;
            case 2:
                userLabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\UserScissors.png"));
                break;
        }
    }

    public void CPUHand(int number) {
        switch (number) {
            case 0:
                CPULabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\CPURock.png"));
                break;
            case 1:
                CPULabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\CPUPaper.png"));
                break;
            case 2:
                CPULabel.setIcon(new ImageIcon(".\\.\\.\\Icons\\CPUScissors.png"));
                break;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        rockButton = new JButton();
        rockButton.setText("Button");
        panel1.add(rockButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        paperButton = new JButton();
        paperButton.setText("Button");
        panel1.add(paperButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scissorsButton = new JButton();
        scissorsButton.setText("Button");
        panel1.add(scissorsButton, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        titleLabel = new JLabel();
        titleLabel.setText("");
        panel1.add(titleLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        userLabel = new JLabel();
        userLabel.setText("");
        panel1.add(userLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CPULabel = new JLabel();
        CPULabel.setText("");
        panel1.add(CPULabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scoreLabel = new JLabel();
        scoreLabel.setHorizontalAlignment(0);
        scoreLabel.setText("Press a Button to Start");
        panel1.add(scoreLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        highScoreLabel = new JLabel();
        highScoreLabel.setText("High Score: 0");
        panel1.add(highScoreLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
